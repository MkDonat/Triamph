//Lopaka variables
static const unsigned char image_controller_icon_bits[] = {0x20,0x00,0xfe,0x03,0xfb,0x07,0x71,0x05,0xfb,0x07,0x8f,0x07,0x07,0x07,0x03,0x06};
static const unsigned char image_sending_data_arrow_bits[] = {0x04,0x02,0x7f,0x02,0x04};
static const unsigned char image_boat_icon_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x03,0x00,0x00,0x07,0x00,0x00,0x0f,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0xfe,0xff,0x00,0xfe,0xff,0x00,0xfc,0x7f,0x00,0xf8,0x3f,0x00,0xc0,0x07,0x00};
static const unsigned char image_icoming_data_arrow_bits[] = {0x10,0x20,0x7f,0x20,0x10};
static const unsigned char image_crab_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0xc0,0x1f,0x00,0xc0,0x1f,0xc0,0x1f,0x00,0xc0,0x01,0x00,0x1c,0x00,0xc0,0x01,0x00,0x1c,0x00,0xc0,0x1f,0xc0,0x1f,0x00,0xf0,0x0f,0x80,0x7f,0x00,0xf0,0x00,0x00,0x78,0x00,0xf8,0x00,0x00,0xf8,0x00,0xf8,0x00,0x00,0xf8,0x00,0xf8,0x00,0x00,0xf8,0x00,0xf8,0x00,0x00,0xf8,0x00,0xf8,0x10,0x40,0xf8,0x00,0xf0,0xf8,0xff,0x78,0x00,0xf0,0xff,0xff,0x7f,0x00,0xc0,0xff,0xff,0x1f,0x00,0x80,0xff,0xff,0x0f,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0xfe,0xff,0x03,0x00,0xe0,0xff,0xff,0x3f,0x00,0x60,0xf8,0xff,0x30,0x00,0x78,0xf8,0xff,0xf0,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0xc4,0x1f,0x01,0x00,0x00,0xc7,0x1f,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static const unsigned char image_pixel_art_fish_bits[] = {0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x66,0x00,0x00,0x20,0x00,0x83,0x00,0x07,0x50,0xc0,0x83,0xe1,0x03,0x20,0xf0,0x07,0xf3,0x03,0x00,0xf8,0x1f,0xfa,0x01,0x00,0xfc,0x7f,0xfc,0x01,0x00,0xfe,0xff,0x7f,0x00,0x00,0xfe,0xff,0x7f,0x00,0x00,0xff,0xff,0x3f,0x00,0x80,0xff,0xff,0x3f,0x00,0x80,0xff,0xff,0x7f,0x00,0x00,0xff,0xff,0x7f,0x00,0x00,0xfe,0xff,0x7f,0x00,0x00,0xf8,0xff,0x7c,0x00,0x00,0xf0,0x7f,0xf8,0x00,0x00,0xe0,0x1f,0xf8,0x01,0x00,0x80,0x0f,0xf0,0x01,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

//Global variables
char speed_buffer[15];
char current_state_buffer[15];
char gaz_buffer[15];
char battery_level_buffer[15];

void vTaskScreenUpdate(void *arg){
  // --- Starting screen ---//
  u8g2.begin();

  // --- Initializing vars ---
    // -> current state
  strncpy(receivedData.active_state_name, "No signal", sizeof(receivedData.active_state_name) - 1);
  current_state_buffer[sizeof(receivedData.active_state_name) - 1] = '\0';  // Assure la terminaison nulle
  // -> gaz
  strncpy(gaz_buffer, "0", sizeof(gaz_buffer) - 1);
  current_state_buffer[sizeof(gaz_buffer) - 1] = '\0';  // Assure la terminaison nulle

  for(;;){
    u8g2.firstPage();
    do{
      u8g2.clearBuffer();
      u8g2.setFontMode(1);
      u8g2.setBitmapMode(1);

      // speed value
      snprintf(speed_buffer, sizeof(speed_buffer), "%u", receivedData.speed_mps); 
      u8g2.setFont(u8g2_font_6x13_tr);
      u8g2.drawStr(60, 30, speed_buffer);

      // triamph battery level
      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(12, 13, "100");

      // label % triamph
      u8g2.drawStr(30, 13, "%");

      // controller icon
      u8g2.drawXBM(76, 5, 11, 8, image_controller_icon_bits);

      // sending data arrow
      if(sending_data){
        u8g2.drawXBM(62, 3, 7, 5, image_sending_data_arrow_bits);
      }

      // boat icon
      u8g2.drawXBM(39, -1, 17, 14, image_boat_icon_bits);

      // label % controller
      u8g2.drawStr(109, 13, "%");

      // icoming data arrow
      if(receiving_data){
        u8g2.drawXBM(62, 8, 7, 5, image_icoming_data_arrow_bits);
      }

      // controller battery level
      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(91, 13, "100");

      // label - mps
      u8g2.setFont(u8g2_font_6x13_tr);
      u8g2.drawStr(58, 38, "mps");

      // filler rect
        // down point y -> 54 h ->3
        // up point y -> 21 h -> 36
      long ramp_y;
      long ramp_h;
      if(*L_J.tor_y >= 1){
        ramp_y = map(*L_J.y_fixed_datas, 2047, 4095, 54, 21);
        ramp_h = map(*L_J.y_fixed_datas, 2047, 4095, 3, 36);
        u8g2.drawBox(116, ramp_y, 4, ramp_h);
      }
       

      // gaz rect
      u8g2.drawFrame(116, 20, 5, 37);

      // --- label current state ---
      strncpy(current_state_buffer, receivedData.active_state_name, sizeof(current_state_buffer) - 1);
      current_state_buffer[sizeof(current_state_buffer) - 1] = '\0';  // Assure la terminaison nulle
    
      u8g2.setFont(u8g2_font_4x6_tr);
      u8g2.drawStr(47, 50, current_state_buffer);

      // --- carb or fish
      if(receivedData.is_on_water){
        //pixel_art_fish
        u8g2.drawXBM(3, 18, 35, 35, image_pixel_art_fish_bits);
      }else{
        //crab
        u8g2.drawXBM(7, 20, 35, 35, image_crab_bits);
      } 

      // --- Send buffer ---
      u8g2.sendBuffer();
    }
    while(u8g2.nextPage());
    //vTaskDelay(pdMS_TO_TICKS(10));
  }
}
void CreateTasksForScreen(){
  xTaskCreatePinnedToCore(
    vTaskScreenUpdate,"screen refresh"
    ,
     2048
    ,
    NULL
    ,
    1 //Priority
    ,
    NULL //Task handle
    ,
    CORE_2 // Core on which the task will run
  );
}